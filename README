Triggr is (intended to be) an R package that transforms the regular session into a *worker mode*, so that it could realise job requests coming through a socket from other apps and stay opened the whole time (something like fastCGI, but with own, lightweight and low level protocol -- or one can just think of it as a yet another light RPC). Opposite to Rserve, it will process arbitrary text messages instead of blindly executing all the incoming data.

Triggr is (intended) to control only one R process, delegating seeding/load-balancing/misbehaving-instance-collection to the master application. The control server (later called *trigger*) itself should be responsive all the time, regardless if the worker is busy or not -- this is going to be achieved by forking it into a pthread thread and and making it a non-blocking solution.

General idea, use-cased:
1. Client connects, server accepts
2. Client sends \r\n\r\n-terminated textual request, server stores it on queue
3a. If R is idle and there is something on queue, R callback is executed on the oldest request
3b. If R finishes a job, the textual result is sent back as \r\n\r\n-terminated string. Callback can also request termination of connection (for instance when error occurs)
3c. If client terminates the connection, all queued jobs get removed from queue. Running job is not going to be cancelled because I suppose there is no good way of cleanly breaking it; there might be some R-callable function like isConnectionStillOpened() to make it possible to support something like this on callback level
3d. Client may send arbitrary large number of requests at random times; the server will not block them because of R activity or not-finished read
3e. Error in callback will result in [? sending pre-defined response to the client] and breaking connection
3f. [? Callbacks are session-aware, like they will get some session ID or session environment to store some data]
4. Once started, Trigger will break only on SIGINT or on in-callback call to stopListening()

This software is still in a very early development, so nothing is documented, almost nothing works and anything can change. Stay tuned!
